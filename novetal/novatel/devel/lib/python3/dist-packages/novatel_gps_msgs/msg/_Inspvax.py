# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from novatel_gps_msgs/Inspvax.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import novatel_gps_msgs.msg
import std_msgs.msg

class Inspvax(genpy.Message):
  _md5sum = "cebf3b182479d01907e3894361b97eba"
  _type = "novatel_gps_msgs/Inspvax"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# message 1465

std_msgs/Header header

NovatelMessageHeader novatel_msg_header

# Table 29 in the SPAN on OEM6 manual:
# See: http://www.novatel.com/assets/Documents/Manuals/OM-20000144UM.pdf#page=121
string ins_status


# Table 30 in the SPAN on OEM6 manual:
# See: http://www.novatel.com/assets/Documents/Manuals/OM-20000144UM.pdf#page=124
string position_type


float64 latitude
float64 longitude
float64 altitude

float32 undulation

float64 north_velocity
float64 east_velocity
float64 up_velocity

float64 roll
float64 pitch
float64 azimuth

float32 latitude_std
float32 longitude_std
float32 altitude_std

float32 north_velocity_std
float32 east_velocity_std
float32 up_velocity_std

float32 roll_std
float32 pitch_std
float32 azimuth_std

NovatelExtendedSolutionStatus extended_status

uint16 seconds_since_update

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: novatel_gps_msgs/NovatelMessageHeader
# Novatel Message Header

string message_name
string port
uint32 sequence_num
float32 percent_idle_time
string gps_time_status
uint32 gps_week_num
float64 gps_seconds

# Bit       Mask      Description
#  0     0x00000001   Error flag (Bit = 0: No Error, Bit = 1: Error)
#  1     0x00000002   Temperature Status (0: Within Spec, 1: Warning)
#  2     0x00000004   Voltage Supply Status (0: OK, 1: Warning)
#  3     0x00000008   Antenna Power Status (0: Powered, 1: Not Powered)
#  4     0x00000010   <Reserved>
#  5     0x00000020   Antenna open flag (0: OK, 1: Open)
#  6     0x00000040   Antenna shorted flag (0: OK, 1: Shorted)
#  7     0x00000080   CPU overload flag
#  8     0x00000100   COM1 buffer overrun flag (0: No overrun, 1: Overrun)
#  9     0x00000200   COM2 buffer overrun flag (0: No overrun, 1: Overrun)
#  10    0x00000400   COM3 buffer overrun flag (0: No overrun, 1: Overrun)
#  11    0x00000800   USB buffer overrun flag (0: No overrun, 1: Overrun)
#  12    0x00001000   <Reserved>
#  13    0x00002000   <Reserved>
#  14    0x00004000   <Reserved>
#  15    0x00008000   RF1 AGC Status (0: OK, 1: Bad)
#  16    0x00010000   <Reserverd>
#  17    0x00020000   RF2 AGC status (0: OK, 1: Bad)
#  18    0x00040000   Almanac flag/UTC known (0: Valid, 1: Invalid)
#  19    0x00080000   Position solution flag (0: Valid, 1: Invalid)
#  20    0x00100000   Position fixed flag (0: Not fixed, 1: Fixed)
#  21    0x00200000   Clock steering status (0: Enabled, 1: Disabled)
#  22    0x00400000   Clock model flag (0: Valid, 1: Invalid)
#  23    0x00800000   OEMV external oscillator flag (0: Disabled, 1: Enabled)
#  24    0x01000000   Software resource (0: OK, 1: Warning)
#  25    0x02000000   <Reserved>
#  26    0x04000000   <Reserved>
#  27    0x08000000   <Reserved>
#  28    0x10000000   <Reserved>
#  29    0x20000000   Auxiliary 3 status event flag (0: No event, 1: Event)
#  30    0x40000000   Auxiliary 2 status event flag (0: No event, 1: Event)
#  31    0x80000000   Auxiliary 1 status event flag (0: No event, 1: Event)
NovatelReceiverStatus receiver_status

# Receiver build number (0-65535)
uint32 receiver_software_version
================================================================================
MSG: novatel_gps_msgs/NovatelReceiverStatus
# From the original Novatel receiver status message bitfield
#  0     0x00000001   Error flag (Bit = 0: No Error, Bit = 1: Error)
#  1     0x00000002   Temperature Status (0: Within Spec, 1: Warning)
#  2     0x00000004   Voltage Supply Status (0: OK, 1: Warning)
#  3     0x00000008   Antenna Power Status (0: Powered, 1: Not Powered)
#  4     0x00000010   <Reserved>
#  5     0x00000020   Antenna open flag (0: OK, 1: Open)
#  6     0x00000040   Antenna shorted flag (0: OK, 1: Shorted)
#  7     0x00000080   CPU overload flag
#  8     0x00000100   COM1 buffer overrun flag (0: No overrun, 1: Overrun)
#  9     0x00000200   COM2 buffer overrun flag (0: No overrun, 1: Overrun)
#  10    0x00000400   COM3 buffer overrun flag (0: No overrun, 1: Overrun)
#  11    0x00000800   USB buffer overrun flag (0: No overrun, 1: Overrun)
#  12    0x00001000   <Reserved>
#  13    0x00002000   <Reserved>
#  14    0x00004000   <Reserved>
#  15    0x00008000   RF1 AGC Status (0: OK, 1: Bad)
#  16    0x00010000   <Reserverd>
#  17    0x00020000   RF2 AGC status (0: OK, 1: Bad)
#  18    0x00040000   Almanac flag/UTC known (0: Valid, 1: Invalid)
#  19    0x00080000   Position solution flag (0: Valid, 1: Invalid)
#  20    0x00100000   Position fixed flag (0: Not fixed, 1: Fixed)
#  21    0x00200000   Clock steering status (0: Enabled, 1: Disabled)
#  22    0x00400000   Clock model flag (0: Valid, 1: Invalid)
#  23    0x00800000   OEMV external oscillator flag (0: Disabled, 1: Enabled)
#  24    0x01000000   Software resource (0: OK, 1: Warning)
#  25    0x02000000   <Reserved>
#  26    0x04000000   <Reserved>
#  27    0x08000000   <Reserved>
#  28    0x10000000   <Reserved>
#  29    0x20000000   Auxiliary 3 status event flag (0: No event, 1: Event)
#  30    0x40000000   Auxiliary 2 status event flag (0: No event, 1: Event)
#  31    0x80000000   Auxiliary 1 status event flag (0: No event, 1: Event)
uint32 original_status_code
bool error_flag
bool temperature_flag
bool voltage_supply_flag
bool antenna_powered
bool antenna_is_open
bool antenna_is_shorted
bool cpu_overload_flag
bool com1_buffer_overrun
bool com2_buffer_overrun
bool com3_buffer_overrun
bool usb_buffer_overrun
bool rf1_agc_flag
bool rf2_agc_flag
bool almanac_flag
bool position_solution_flag
bool position_fixed_flag
bool clock_steering_status_enabled
bool clock_model_flag
bool oemv_external_oscillator_flag
bool software_resource_flag
bool aux1_status_event_flag
bool aux2_status_event_flag
bool aux3_status_event_flag


================================================================================
MSG: novatel_gps_msgs/NovatelExtendedSolutionStatus
# Bit    Mask      Description
#  0     0x01      Advance RTK verified (0 = not verified, 1 = verified)
# 1-3    0x0E      Pseudorange Ionosphere Correction
#                    0 = unknown
#                    1 = Klobuchar Broadcast
#                    2 = SBAS Broadcast
#                    3 = Multi-frequency Computed
#                    4 = PSRDiff Correction
#                    5 = NovaTel Blended Ionosphere Value
# 4-7  0xF0        <Reserved>
uint32 original_mask
bool advance_rtk_verified
string psuedorange_iono_correction
"""
  __slots__ = ['header','novatel_msg_header','ins_status','position_type','latitude','longitude','altitude','undulation','north_velocity','east_velocity','up_velocity','roll','pitch','azimuth','latitude_std','longitude_std','altitude_std','north_velocity_std','east_velocity_std','up_velocity_std','roll_std','pitch_std','azimuth_std','extended_status','seconds_since_update']
  _slot_types = ['std_msgs/Header','novatel_gps_msgs/NovatelMessageHeader','string','string','float64','float64','float64','float32','float64','float64','float64','float64','float64','float64','float32','float32','float32','float32','float32','float32','float32','float32','float32','novatel_gps_msgs/NovatelExtendedSolutionStatus','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,novatel_msg_header,ins_status,position_type,latitude,longitude,altitude,undulation,north_velocity,east_velocity,up_velocity,roll,pitch,azimuth,latitude_std,longitude_std,altitude_std,north_velocity_std,east_velocity_std,up_velocity_std,roll_std,pitch_std,azimuth_std,extended_status,seconds_since_update

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Inspvax, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.novatel_msg_header is None:
        self.novatel_msg_header = novatel_gps_msgs.msg.NovatelMessageHeader()
      if self.ins_status is None:
        self.ins_status = ''
      if self.position_type is None:
        self.position_type = ''
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.undulation is None:
        self.undulation = 0.
      if self.north_velocity is None:
        self.north_velocity = 0.
      if self.east_velocity is None:
        self.east_velocity = 0.
      if self.up_velocity is None:
        self.up_velocity = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.azimuth is None:
        self.azimuth = 0.
      if self.latitude_std is None:
        self.latitude_std = 0.
      if self.longitude_std is None:
        self.longitude_std = 0.
      if self.altitude_std is None:
        self.altitude_std = 0.
      if self.north_velocity_std is None:
        self.north_velocity_std = 0.
      if self.east_velocity_std is None:
        self.east_velocity_std = 0.
      if self.up_velocity_std is None:
        self.up_velocity_std = 0.
      if self.roll_std is None:
        self.roll_std = 0.
      if self.pitch_std is None:
        self.pitch_std = 0.
      if self.azimuth_std is None:
        self.azimuth_std = 0.
      if self.extended_status is None:
        self.extended_status = novatel_gps_msgs.msg.NovatelExtendedSolutionStatus()
      if self.seconds_since_update is None:
        self.seconds_since_update = 0
    else:
      self.header = std_msgs.msg.Header()
      self.novatel_msg_header = novatel_gps_msgs.msg.NovatelMessageHeader()
      self.ins_status = ''
      self.position_type = ''
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.undulation = 0.
      self.north_velocity = 0.
      self.east_velocity = 0.
      self.up_velocity = 0.
      self.roll = 0.
      self.pitch = 0.
      self.azimuth = 0.
      self.latitude_std = 0.
      self.longitude_std = 0.
      self.altitude_std = 0.
      self.north_velocity_std = 0.
      self.east_velocity_std = 0.
      self.up_velocity_std = 0.
      self.roll_std = 0.
      self.pitch_std = 0.
      self.azimuth_std = 0.
      self.extended_status = novatel_gps_msgs.msg.NovatelExtendedSolutionStatus()
      self.seconds_since_update = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.novatel_msg_header.message_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.novatel_msg_header.port
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_If().pack(_x.novatel_msg_header.sequence_num, _x.novatel_msg_header.percent_idle_time))
      _x = self.novatel_msg_header.gps_time_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IdI23BI().pack(_x.novatel_msg_header.gps_week_num, _x.novatel_msg_header.gps_seconds, _x.novatel_msg_header.receiver_status.original_status_code, _x.novatel_msg_header.receiver_status.error_flag, _x.novatel_msg_header.receiver_status.temperature_flag, _x.novatel_msg_header.receiver_status.voltage_supply_flag, _x.novatel_msg_header.receiver_status.antenna_powered, _x.novatel_msg_header.receiver_status.antenna_is_open, _x.novatel_msg_header.receiver_status.antenna_is_shorted, _x.novatel_msg_header.receiver_status.cpu_overload_flag, _x.novatel_msg_header.receiver_status.com1_buffer_overrun, _x.novatel_msg_header.receiver_status.com2_buffer_overrun, _x.novatel_msg_header.receiver_status.com3_buffer_overrun, _x.novatel_msg_header.receiver_status.usb_buffer_overrun, _x.novatel_msg_header.receiver_status.rf1_agc_flag, _x.novatel_msg_header.receiver_status.rf2_agc_flag, _x.novatel_msg_header.receiver_status.almanac_flag, _x.novatel_msg_header.receiver_status.position_solution_flag, _x.novatel_msg_header.receiver_status.position_fixed_flag, _x.novatel_msg_header.receiver_status.clock_steering_status_enabled, _x.novatel_msg_header.receiver_status.clock_model_flag, _x.novatel_msg_header.receiver_status.oemv_external_oscillator_flag, _x.novatel_msg_header.receiver_status.software_resource_flag, _x.novatel_msg_header.receiver_status.aux1_status_event_flag, _x.novatel_msg_header.receiver_status.aux2_status_event_flag, _x.novatel_msg_header.receiver_status.aux3_status_event_flag, _x.novatel_msg_header.receiver_software_version))
      _x = self.ins_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.position_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3df6d9fIB().pack(_x.latitude, _x.longitude, _x.altitude, _x.undulation, _x.north_velocity, _x.east_velocity, _x.up_velocity, _x.roll, _x.pitch, _x.azimuth, _x.latitude_std, _x.longitude_std, _x.altitude_std, _x.north_velocity_std, _x.east_velocity_std, _x.up_velocity_std, _x.roll_std, _x.pitch_std, _x.azimuth_std, _x.extended_status.original_mask, _x.extended_status.advance_rtk_verified))
      _x = self.extended_status.psuedorange_iono_correction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.seconds_since_update
      buff.write(_get_struct_H().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.novatel_msg_header is None:
        self.novatel_msg_header = novatel_gps_msgs.msg.NovatelMessageHeader()
      if self.extended_status is None:
        self.extended_status = novatel_gps_msgs.msg.NovatelExtendedSolutionStatus()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.novatel_msg_header.message_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.novatel_msg_header.message_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.novatel_msg_header.port = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.novatel_msg_header.port = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.novatel_msg_header.sequence_num, _x.novatel_msg_header.percent_idle_time,) = _get_struct_If().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.novatel_msg_header.gps_time_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.novatel_msg_header.gps_time_status = str[start:end]
      _x = self
      start = end
      end += 43
      (_x.novatel_msg_header.gps_week_num, _x.novatel_msg_header.gps_seconds, _x.novatel_msg_header.receiver_status.original_status_code, _x.novatel_msg_header.receiver_status.error_flag, _x.novatel_msg_header.receiver_status.temperature_flag, _x.novatel_msg_header.receiver_status.voltage_supply_flag, _x.novatel_msg_header.receiver_status.antenna_powered, _x.novatel_msg_header.receiver_status.antenna_is_open, _x.novatel_msg_header.receiver_status.antenna_is_shorted, _x.novatel_msg_header.receiver_status.cpu_overload_flag, _x.novatel_msg_header.receiver_status.com1_buffer_overrun, _x.novatel_msg_header.receiver_status.com2_buffer_overrun, _x.novatel_msg_header.receiver_status.com3_buffer_overrun, _x.novatel_msg_header.receiver_status.usb_buffer_overrun, _x.novatel_msg_header.receiver_status.rf1_agc_flag, _x.novatel_msg_header.receiver_status.rf2_agc_flag, _x.novatel_msg_header.receiver_status.almanac_flag, _x.novatel_msg_header.receiver_status.position_solution_flag, _x.novatel_msg_header.receiver_status.position_fixed_flag, _x.novatel_msg_header.receiver_status.clock_steering_status_enabled, _x.novatel_msg_header.receiver_status.clock_model_flag, _x.novatel_msg_header.receiver_status.oemv_external_oscillator_flag, _x.novatel_msg_header.receiver_status.software_resource_flag, _x.novatel_msg_header.receiver_status.aux1_status_event_flag, _x.novatel_msg_header.receiver_status.aux2_status_event_flag, _x.novatel_msg_header.receiver_status.aux3_status_event_flag, _x.novatel_msg_header.receiver_software_version,) = _get_struct_IdI23BI().unpack(str[start:end])
      self.novatel_msg_header.receiver_status.error_flag = bool(self.novatel_msg_header.receiver_status.error_flag)
      self.novatel_msg_header.receiver_status.temperature_flag = bool(self.novatel_msg_header.receiver_status.temperature_flag)
      self.novatel_msg_header.receiver_status.voltage_supply_flag = bool(self.novatel_msg_header.receiver_status.voltage_supply_flag)
      self.novatel_msg_header.receiver_status.antenna_powered = bool(self.novatel_msg_header.receiver_status.antenna_powered)
      self.novatel_msg_header.receiver_status.antenna_is_open = bool(self.novatel_msg_header.receiver_status.antenna_is_open)
      self.novatel_msg_header.receiver_status.antenna_is_shorted = bool(self.novatel_msg_header.receiver_status.antenna_is_shorted)
      self.novatel_msg_header.receiver_status.cpu_overload_flag = bool(self.novatel_msg_header.receiver_status.cpu_overload_flag)
      self.novatel_msg_header.receiver_status.com1_buffer_overrun = bool(self.novatel_msg_header.receiver_status.com1_buffer_overrun)
      self.novatel_msg_header.receiver_status.com2_buffer_overrun = bool(self.novatel_msg_header.receiver_status.com2_buffer_overrun)
      self.novatel_msg_header.receiver_status.com3_buffer_overrun = bool(self.novatel_msg_header.receiver_status.com3_buffer_overrun)
      self.novatel_msg_header.receiver_status.usb_buffer_overrun = bool(self.novatel_msg_header.receiver_status.usb_buffer_overrun)
      self.novatel_msg_header.receiver_status.rf1_agc_flag = bool(self.novatel_msg_header.receiver_status.rf1_agc_flag)
      self.novatel_msg_header.receiver_status.rf2_agc_flag = bool(self.novatel_msg_header.receiver_status.rf2_agc_flag)
      self.novatel_msg_header.receiver_status.almanac_flag = bool(self.novatel_msg_header.receiver_status.almanac_flag)
      self.novatel_msg_header.receiver_status.position_solution_flag = bool(self.novatel_msg_header.receiver_status.position_solution_flag)
      self.novatel_msg_header.receiver_status.position_fixed_flag = bool(self.novatel_msg_header.receiver_status.position_fixed_flag)
      self.novatel_msg_header.receiver_status.clock_steering_status_enabled = bool(self.novatel_msg_header.receiver_status.clock_steering_status_enabled)
      self.novatel_msg_header.receiver_status.clock_model_flag = bool(self.novatel_msg_header.receiver_status.clock_model_flag)
      self.novatel_msg_header.receiver_status.oemv_external_oscillator_flag = bool(self.novatel_msg_header.receiver_status.oemv_external_oscillator_flag)
      self.novatel_msg_header.receiver_status.software_resource_flag = bool(self.novatel_msg_header.receiver_status.software_resource_flag)
      self.novatel_msg_header.receiver_status.aux1_status_event_flag = bool(self.novatel_msg_header.receiver_status.aux1_status_event_flag)
      self.novatel_msg_header.receiver_status.aux2_status_event_flag = bool(self.novatel_msg_header.receiver_status.aux2_status_event_flag)
      self.novatel_msg_header.receiver_status.aux3_status_event_flag = bool(self.novatel_msg_header.receiver_status.aux3_status_event_flag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ins_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ins_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.position_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.position_type = str[start:end]
      _x = self
      start = end
      end += 117
      (_x.latitude, _x.longitude, _x.altitude, _x.undulation, _x.north_velocity, _x.east_velocity, _x.up_velocity, _x.roll, _x.pitch, _x.azimuth, _x.latitude_std, _x.longitude_std, _x.altitude_std, _x.north_velocity_std, _x.east_velocity_std, _x.up_velocity_std, _x.roll_std, _x.pitch_std, _x.azimuth_std, _x.extended_status.original_mask, _x.extended_status.advance_rtk_verified,) = _get_struct_3df6d9fIB().unpack(str[start:end])
      self.extended_status.advance_rtk_verified = bool(self.extended_status.advance_rtk_verified)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.extended_status.psuedorange_iono_correction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.extended_status.psuedorange_iono_correction = str[start:end]
      start = end
      end += 2
      (self.seconds_since_update,) = _get_struct_H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.novatel_msg_header.message_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.novatel_msg_header.port
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_If().pack(_x.novatel_msg_header.sequence_num, _x.novatel_msg_header.percent_idle_time))
      _x = self.novatel_msg_header.gps_time_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IdI23BI().pack(_x.novatel_msg_header.gps_week_num, _x.novatel_msg_header.gps_seconds, _x.novatel_msg_header.receiver_status.original_status_code, _x.novatel_msg_header.receiver_status.error_flag, _x.novatel_msg_header.receiver_status.temperature_flag, _x.novatel_msg_header.receiver_status.voltage_supply_flag, _x.novatel_msg_header.receiver_status.antenna_powered, _x.novatel_msg_header.receiver_status.antenna_is_open, _x.novatel_msg_header.receiver_status.antenna_is_shorted, _x.novatel_msg_header.receiver_status.cpu_overload_flag, _x.novatel_msg_header.receiver_status.com1_buffer_overrun, _x.novatel_msg_header.receiver_status.com2_buffer_overrun, _x.novatel_msg_header.receiver_status.com3_buffer_overrun, _x.novatel_msg_header.receiver_status.usb_buffer_overrun, _x.novatel_msg_header.receiver_status.rf1_agc_flag, _x.novatel_msg_header.receiver_status.rf2_agc_flag, _x.novatel_msg_header.receiver_status.almanac_flag, _x.novatel_msg_header.receiver_status.position_solution_flag, _x.novatel_msg_header.receiver_status.position_fixed_flag, _x.novatel_msg_header.receiver_status.clock_steering_status_enabled, _x.novatel_msg_header.receiver_status.clock_model_flag, _x.novatel_msg_header.receiver_status.oemv_external_oscillator_flag, _x.novatel_msg_header.receiver_status.software_resource_flag, _x.novatel_msg_header.receiver_status.aux1_status_event_flag, _x.novatel_msg_header.receiver_status.aux2_status_event_flag, _x.novatel_msg_header.receiver_status.aux3_status_event_flag, _x.novatel_msg_header.receiver_software_version))
      _x = self.ins_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.position_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3df6d9fIB().pack(_x.latitude, _x.longitude, _x.altitude, _x.undulation, _x.north_velocity, _x.east_velocity, _x.up_velocity, _x.roll, _x.pitch, _x.azimuth, _x.latitude_std, _x.longitude_std, _x.altitude_std, _x.north_velocity_std, _x.east_velocity_std, _x.up_velocity_std, _x.roll_std, _x.pitch_std, _x.azimuth_std, _x.extended_status.original_mask, _x.extended_status.advance_rtk_verified))
      _x = self.extended_status.psuedorange_iono_correction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.seconds_since_update
      buff.write(_get_struct_H().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.novatel_msg_header is None:
        self.novatel_msg_header = novatel_gps_msgs.msg.NovatelMessageHeader()
      if self.extended_status is None:
        self.extended_status = novatel_gps_msgs.msg.NovatelExtendedSolutionStatus()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.novatel_msg_header.message_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.novatel_msg_header.message_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.novatel_msg_header.port = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.novatel_msg_header.port = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.novatel_msg_header.sequence_num, _x.novatel_msg_header.percent_idle_time,) = _get_struct_If().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.novatel_msg_header.gps_time_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.novatel_msg_header.gps_time_status = str[start:end]
      _x = self
      start = end
      end += 43
      (_x.novatel_msg_header.gps_week_num, _x.novatel_msg_header.gps_seconds, _x.novatel_msg_header.receiver_status.original_status_code, _x.novatel_msg_header.receiver_status.error_flag, _x.novatel_msg_header.receiver_status.temperature_flag, _x.novatel_msg_header.receiver_status.voltage_supply_flag, _x.novatel_msg_header.receiver_status.antenna_powered, _x.novatel_msg_header.receiver_status.antenna_is_open, _x.novatel_msg_header.receiver_status.antenna_is_shorted, _x.novatel_msg_header.receiver_status.cpu_overload_flag, _x.novatel_msg_header.receiver_status.com1_buffer_overrun, _x.novatel_msg_header.receiver_status.com2_buffer_overrun, _x.novatel_msg_header.receiver_status.com3_buffer_overrun, _x.novatel_msg_header.receiver_status.usb_buffer_overrun, _x.novatel_msg_header.receiver_status.rf1_agc_flag, _x.novatel_msg_header.receiver_status.rf2_agc_flag, _x.novatel_msg_header.receiver_status.almanac_flag, _x.novatel_msg_header.receiver_status.position_solution_flag, _x.novatel_msg_header.receiver_status.position_fixed_flag, _x.novatel_msg_header.receiver_status.clock_steering_status_enabled, _x.novatel_msg_header.receiver_status.clock_model_flag, _x.novatel_msg_header.receiver_status.oemv_external_oscillator_flag, _x.novatel_msg_header.receiver_status.software_resource_flag, _x.novatel_msg_header.receiver_status.aux1_status_event_flag, _x.novatel_msg_header.receiver_status.aux2_status_event_flag, _x.novatel_msg_header.receiver_status.aux3_status_event_flag, _x.novatel_msg_header.receiver_software_version,) = _get_struct_IdI23BI().unpack(str[start:end])
      self.novatel_msg_header.receiver_status.error_flag = bool(self.novatel_msg_header.receiver_status.error_flag)
      self.novatel_msg_header.receiver_status.temperature_flag = bool(self.novatel_msg_header.receiver_status.temperature_flag)
      self.novatel_msg_header.receiver_status.voltage_supply_flag = bool(self.novatel_msg_header.receiver_status.voltage_supply_flag)
      self.novatel_msg_header.receiver_status.antenna_powered = bool(self.novatel_msg_header.receiver_status.antenna_powered)
      self.novatel_msg_header.receiver_status.antenna_is_open = bool(self.novatel_msg_header.receiver_status.antenna_is_open)
      self.novatel_msg_header.receiver_status.antenna_is_shorted = bool(self.novatel_msg_header.receiver_status.antenna_is_shorted)
      self.novatel_msg_header.receiver_status.cpu_overload_flag = bool(self.novatel_msg_header.receiver_status.cpu_overload_flag)
      self.novatel_msg_header.receiver_status.com1_buffer_overrun = bool(self.novatel_msg_header.receiver_status.com1_buffer_overrun)
      self.novatel_msg_header.receiver_status.com2_buffer_overrun = bool(self.novatel_msg_header.receiver_status.com2_buffer_overrun)
      self.novatel_msg_header.receiver_status.com3_buffer_overrun = bool(self.novatel_msg_header.receiver_status.com3_buffer_overrun)
      self.novatel_msg_header.receiver_status.usb_buffer_overrun = bool(self.novatel_msg_header.receiver_status.usb_buffer_overrun)
      self.novatel_msg_header.receiver_status.rf1_agc_flag = bool(self.novatel_msg_header.receiver_status.rf1_agc_flag)
      self.novatel_msg_header.receiver_status.rf2_agc_flag = bool(self.novatel_msg_header.receiver_status.rf2_agc_flag)
      self.novatel_msg_header.receiver_status.almanac_flag = bool(self.novatel_msg_header.receiver_status.almanac_flag)
      self.novatel_msg_header.receiver_status.position_solution_flag = bool(self.novatel_msg_header.receiver_status.position_solution_flag)
      self.novatel_msg_header.receiver_status.position_fixed_flag = bool(self.novatel_msg_header.receiver_status.position_fixed_flag)
      self.novatel_msg_header.receiver_status.clock_steering_status_enabled = bool(self.novatel_msg_header.receiver_status.clock_steering_status_enabled)
      self.novatel_msg_header.receiver_status.clock_model_flag = bool(self.novatel_msg_header.receiver_status.clock_model_flag)
      self.novatel_msg_header.receiver_status.oemv_external_oscillator_flag = bool(self.novatel_msg_header.receiver_status.oemv_external_oscillator_flag)
      self.novatel_msg_header.receiver_status.software_resource_flag = bool(self.novatel_msg_header.receiver_status.software_resource_flag)
      self.novatel_msg_header.receiver_status.aux1_status_event_flag = bool(self.novatel_msg_header.receiver_status.aux1_status_event_flag)
      self.novatel_msg_header.receiver_status.aux2_status_event_flag = bool(self.novatel_msg_header.receiver_status.aux2_status_event_flag)
      self.novatel_msg_header.receiver_status.aux3_status_event_flag = bool(self.novatel_msg_header.receiver_status.aux3_status_event_flag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ins_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ins_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.position_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.position_type = str[start:end]
      _x = self
      start = end
      end += 117
      (_x.latitude, _x.longitude, _x.altitude, _x.undulation, _x.north_velocity, _x.east_velocity, _x.up_velocity, _x.roll, _x.pitch, _x.azimuth, _x.latitude_std, _x.longitude_std, _x.altitude_std, _x.north_velocity_std, _x.east_velocity_std, _x.up_velocity_std, _x.roll_std, _x.pitch_std, _x.azimuth_std, _x.extended_status.original_mask, _x.extended_status.advance_rtk_verified,) = _get_struct_3df6d9fIB().unpack(str[start:end])
      self.extended_status.advance_rtk_verified = bool(self.extended_status.advance_rtk_verified)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.extended_status.psuedorange_iono_correction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.extended_status.psuedorange_iono_correction = str[start:end]
      start = end
      end += 2
      (self.seconds_since_update,) = _get_struct_H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3df6d9fIB = None
def _get_struct_3df6d9fIB():
    global _struct_3df6d9fIB
    if _struct_3df6d9fIB is None:
        _struct_3df6d9fIB = struct.Struct("<3df6d9fIB")
    return _struct_3df6d9fIB
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_IdI23BI = None
def _get_struct_IdI23BI():
    global _struct_IdI23BI
    if _struct_IdI23BI is None:
        _struct_IdI23BI = struct.Struct("<IdI23BI")
    return _struct_IdI23BI
_struct_If = None
def _get_struct_If():
    global _struct_If
    if _struct_If is None:
        _struct_If = struct.Struct("<If")
    return _struct_If
